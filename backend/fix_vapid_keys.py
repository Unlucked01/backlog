#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö VAPID –∫–ª—é—á–µ–π
"""

import base64
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import ec

try:
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á EC P-256
    private_key = ec.generate_private_key(ec.SECP256R1())
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
    public_key = private_key.public_key()
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ PEM —Ñ–æ—Ä–º–∞—Ç–µ
    private_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ –Ω–µ—Å–∂–∞—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è VAPID
    public_numbers = public_key.public_numbers()
    x_bytes = public_numbers.x.to_bytes(32, 'big')
    y_bytes = public_numbers.y.to_bytes(32, 'big')
    public_key_uncompressed = b'\x04' + x_bytes + y_bytes
    
    # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    private_key_b64 = base64.urlsafe_b64encode(private_pem).decode('ascii').rstrip('=')
    public_key_b64 = base64.urlsafe_b64encode(public_key_uncompressed).decode('ascii').rstrip('=')
    
    print("üîë –ù–æ–≤—ã–µ VAPID –∫–ª—é—á–∏:")
    print("=" * 70)
    print(f"VAPID_PRIVATE_KEY={private_key_b64}")
    print(f"VAPID_PUBLIC_KEY={public_key_b64}")
    print("=" * 70)
    
    print("\nüìù –û–±–Ω–æ–≤–∏—Ç–µ docker-compose.yml:")
    print(f"      - VAPID_PRIVATE_KEY={private_key_b64}")
    print(f"      - VAPID_PUBLIC_KEY={public_key_b64}")
    
    print("\nüåê –û–±–Ω–æ–≤–∏—Ç–µ frontend:")
    print(f"        NEXT_PUBLIC_VAPID_PUBLIC_KEY: {public_key_b64}")
    
    print("\nüîß –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ PEM —Ñ–æ—Ä–º–∞—Ç–µ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏):")
    print(private_pem.decode('utf-8'))
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}") 