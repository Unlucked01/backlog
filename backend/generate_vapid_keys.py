#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VAPID –∫–ª—é—á–µ–π –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import base64
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.backends import default_backend

def generate_vapid_keys():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä—É VAPID –∫–ª—é—á–µ–π"""
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
    public_key = private_key.public_key()
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ PEM —Ñ–æ—Ä–º–∞—Ç
    private_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –¥–ª—è –≤–µ–±-push
    public_der = public_key.public_bytes(
        encoding=serialization.Encoding.X962,
        format=serialization.PublicFormat.UncompressedPoint
    )
    
    # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∞–π—Ç (0x04) –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ base64url
    public_b64 = base64.urlsafe_b64encode(public_der[1:]).decode('utf-8').rstrip('=')
    
    return {
        'private_key': private_pem.decode('utf-8'),
        'public_key': public_b64
    }

def main():
    print("üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VAPID –∫–ª—é—á–µ–π...")
    
    keys = generate_vapid_keys()
    
    print("\n" + "="*60)
    print("üìã VAPID –∫–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    print("="*60)
    
    print("\nüîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (VAPID_PRIVATE_KEY):")
    print("-" * 40)
    print(keys['private_key'])
    
    print("\nüîì –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á (VAPID_PUBLIC_KEY):")
    print("-" * 40)
    print(keys['public_key'])
    
    print("\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
    print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á–∏ –≤ –≤–∞—à docker-compose.yml")
    print("2. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("   - VAPID_PRIVATE_KEY")
    print("   - VAPID_PUBLIC_KEY") 
    print("   - NEXT_PUBLIC_VAPID_PUBLIC_KEY")
    print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã")
    
    print("\n‚ö†Ô∏è  –í–∞–∂–Ω–æ:")
    print("- –•—Ä–∞–Ω–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    print("- –ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –∫–ª—é—á–∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å")
    print("- –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ frontend –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")

if __name__ == "__main__":
    main() 