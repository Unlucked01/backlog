import json
import logging
from datetime import datetime, timedelta
from typing import List, Optional
from pywebpush import webpush, WebPushException
from sqlalchemy.orm import Session

from ..core.config import settings
from ..schemas.user import PushNotification
from ..crud import user as crud_user

logger = logging.getLogger(__name__)


class NotificationService:
    
    @staticmethod
    def send_push_notification(
        subscription_info: dict,
        notification_data: PushNotification
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not settings.VAPID_PRIVATE_KEY or not settings.VAPID_PUBLIC_KEY:
            logger.error("VAPID –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        try:
            payload = {
                "title": notification_data.title,
                "body": notification_data.body,
                "icon": notification_data.icon or "/icon-192x192.png",
                "badge": "/icon-72x72.png",
                "url": notification_data.url or "/",
                "tag": notification_data.tag or "general",
                "timestamp": int(datetime.now().timestamp() * 1000),
                "requireInteraction": True,
                "actions": [
                    {
                        "action": "view",
                        "title": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
                    },
                    {
                        "action": "dismiss", 
                        "title": "–°–∫—Ä—ã—Ç—å"
                    }
                ]
            }
            
            # VAPID –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á - —ç—Ç–æ base64-encoded PEM —Å—Ç—Ä–æ–∫–∞
            import base64
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å PEM —Å—Ç—Ä–æ–∫—É
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º padding –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                padding = len(settings.VAPID_PRIVATE_KEY) % 4
                if padding:
                    vapid_key_padded = settings.VAPID_PRIVATE_KEY + '=' * (4 - padding)
                else:
                    vapid_key_padded = settings.VAPID_PRIVATE_KEY
                    
                vapid_private_pem = base64.urlsafe_b64decode(vapid_key_padded).decode('utf-8')
                logger.info("Successfully decoded VAPID private key")
            except Exception as e:
                logger.error(f"Failed to decode VAPID private key: {e}")
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                vapid_private_pem = settings.VAPID_PRIVATE_KEY
            
            webpush(
                subscription_info=subscription_info,
                data=json.dumps(payload),
                vapid_private_key=vapid_private_pem,
                vapid_claims={
                    "sub": settings.VAPID_SUBJECT
                }
            )
            return True
            
        except WebPushException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    @staticmethod
    def send_notification_to_user(
        db: Session,
        user_id: int,
        notification: PushNotification
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        user = crud_user.get_user(db, user_id)
        push_subscription = crud_user.get_push_subscription(db, user_id)
        if not user or not push_subscription:
            return False
        
        try:
            subscription_info = {
                "endpoint": push_subscription.endpoint,
                "keys": {
                    "p256dh": push_subscription.p256dh_key,
                    "auth": push_subscription.auth_key
                }
            }
            return NotificationService.send_push_notification(
                subscription_info, notification
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    @staticmethod
    def send_deadline_reminder(
        db: Session,
        user_id: int,
        task_title: str,
        deadline: datetime,
        task_id: int
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ"""
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å
        time_left = deadline - datetime.now()
        
        if time_left.days > 0:
            time_text = f"—á–µ—Ä–µ–∑ {time_left.days} –¥–Ω."
        elif time_left.seconds > 3600:
            hours = time_left.seconds // 3600
            time_text = f"—á–µ—Ä–µ–∑ {hours} —á."
        elif time_left.seconds > 60:
            minutes = time_left.seconds // 60
            time_text = f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω."
        else:
            time_text = "–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
        
        notification = PushNotification(
            title=f"üìÖ –î–µ–¥–ª–∞–π–Ω {time_text}",
            body=f"–ó–∞–¥–∞—á–∞: {task_title}",
            icon="/icon-192x192.png",
            url=f"/tasks/{task_id}",
            tag=f"deadline-{task_id}"
        )
        
        return NotificationService.send_notification_to_user(
            db, user_id, notification
        )
    
    @staticmethod
    def send_overdue_reminder(
        db: Session,
        user_id: int,
        task_title: str,
        days_overdue: int,
        task_id: int
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ"""
        notification = PushNotification(
            title="üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞!",
            body=f"{task_title} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ {days_overdue} –¥–Ω.",
            icon="/icon-192x192.png",
            url=f"/tasks/{task_id}",
            tag=f"overdue-{task_id}"
        )
        
        return NotificationService.send_notification_to_user(
            db, user_id, notification
        )
    
    @staticmethod
    def send_achievement_notification(
        db: Session,
        user_id: int,
        achievement_title: str,
        achievement_description: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏"""
        notification = PushNotification(
            title=f"üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!",
            body=f"{achievement_title}: {achievement_description}",
            icon="/icon-192x192.png",
            url="/profile",
            tag="achievement"
        )
        
        return NotificationService.send_notification_to_user(
            db, user_id, notification
        )
    
    @staticmethod
    def send_daily_summary(
        db: Session,
        user_id: int,
        total_tasks: int,
        completed_tasks: int,
        overdue_tasks: int
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É"""
        if total_tasks == 0:
            body = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–¥—ã—Ö–∞! üòé"
        elif completed_tasks == total_tasks:
            body = f"–í—Å–µ {total_tasks} –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! üéâ"
        elif overdue_tasks > 0:
            body = f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {completed_tasks}/{total_tasks}, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {overdue_tasks}"
        else:
            body = f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {completed_tasks}/{total_tasks} –∑–∞–¥–∞—á. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ! üí™"
        
        notification = PushNotification(
            title="üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞",
            body=body,
            icon="/icon-192x192.png",
            url="/",
            tag="daily-summary"
        )
        
        return NotificationService.send_notification_to_user(
            db, user_id, notification
        )
    
    @staticmethod
    def send_welcome_notification(
        db: Session,
        user_id: int,
        user_name: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        notification = PushNotification(
            title=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! üéì",
            body="–ù–∞—á–Ω–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
            icon="/icon-192x192.png",
            url="/tasks/new",
            tag="welcome"
        )
        
        return NotificationService.send_notification_to_user(
            db, user_id, notification
        ) 