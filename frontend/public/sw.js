// Service Worker –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
const CACHE_NAME = 'student-planner-v2';
const urlsToCache = [
  '/',
  '/tasks',
  '/calendar',
  '/profile'
];

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
let scheduledNotifications = [];
let notificationSchedules = [];
let scheduledIntervals = new Map();

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', (event) => {
  console.log('Service Worker installing...');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Opened cache');
        return cache.addAll(urlsToCache);
      })
      .catch(error => {
        console.error('Cache add failed:', error);
      })
  );
  self.skipWaiting(); // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π SW –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', (event) => {
  console.log('Service Worker activating...');
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      console.log('Service Worker activated');
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
      initializeScheduledNotifications();
      return self.clients.claim(); // –ë–µ—Ä–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    })
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ fetch –∑–∞–ø—Ä–æ—Å–æ–≤ (offline –ø–æ–¥–¥–µ—Ä–∂–∫–∞)
self.addEventListener('fetch', (event) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ API –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å CORS
  if (event.request.url.includes('/api/')) {
    return;
  }

  event.respondWith(
    caches.match(event.request)
      .then((response) => {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ –¥–µ–ª–∞–µ–º —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å
        if (response) {
          return response;
        }
        return fetch(event.request).catch(() => {
          // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è SPA
          if (event.request.destination === 'document') {
            return caches.match('/');
          }
        });
      })
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
self.addEventListener('message', (event) => {
  console.log('Service Worker received message:', event.data);
  
  if (event.data && event.data.type === 'SCHEDULE_NOTIFICATIONS') {
    scheduleNotifications(event.data.schedules);
  } else if (event.data && event.data.type === 'SCHEDULE_CUSTOM_NOTIFICATION') {
    scheduleCustomNotification(event.data.notification);
  } else if (event.data && event.data.type === 'GET_SCHEDULED_NOTIFICATIONS') {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ
    event.ports[0].postMessage({
      type: 'SCHEDULED_NOTIFICATIONS_RESPONSE',
      notifications: scheduledNotifications
    });
  } else if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function initializeScheduledNotifications() {
  console.log('Initializing scheduled notifications...');
  
  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
  scheduledIntervals.forEach((interval) => {
    clearInterval(interval);
  });
  scheduledIntervals.clear();
  
  try {
    // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const checkInterval = setInterval(() => {
      checkScheduledNotifications();
    }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    scheduledIntervals.set('main_check', checkInterval);
    console.log('Scheduled notifications initialized');
  } catch (error) {
    console.error('Error initializing scheduled notifications:', error);
  }
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function scheduleNotifications(schedules) {
  console.log('Scheduling notifications for:', schedules);
  notificationSchedules = schedules;
  
  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —ç—Ç–∏—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  schedules.forEach(schedule => {
    const existingInterval = scheduledIntervals.get(schedule.type);
    if (existingInterval) {
      clearInterval(existingInterval);
    }
    
    if (schedule.enabled) {
      setupScheduleInterval(schedule);
    }
  });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function setupScheduleInterval(schedule) {
  console.log('Setting up interval for schedule:', schedule);
  
  const checkInterval = setInterval(() => {
    const now = new Date();
    const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (shouldSendNotification(schedule, now, currentTime)) {
      sendScheduledNotification(schedule);
    }
  }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  
  scheduledIntervals.set(schedule.type, checkInterval);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function shouldSendNotification(schedule, now, currentTime) {
  if (schedule.time !== currentTime) {
    return false;
  }
  
  switch (schedule.type) {
    case 'task_deadline':
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
      return true;
      
    case 'daily_summary':
      // –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
      return true;
      
    case 'weekly_review':
      // –ù–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
      const dayOfWeek = now.getDay();
      return schedule.days && schedule.days.includes(dayOfWeek);
      
    default:
      return false;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function sendScheduledNotification(schedule) {
  let notificationData = getNotificationDataForSchedule(schedule);
  
  console.log('Sending scheduled notification:', notificationData);
  
  const notificationOptions = {
    body: notificationData.body,
    icon: '/icons/icon-192x192.png',
    badge: '/icons/icon-72x72.png',
    tag: schedule.type,
    data: {
      url: notificationData.url,
      type: 'scheduled',
      scheduleType: schedule.type
    },
    actions: [
      {
        action: 'view',
        title: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
      },
      {
        action: 'dismiss',
        title: '–°–∫—Ä—ã—Ç—å'
      }
    ],
    requireInteraction: false,
    silent: false
  };
  
  self.registration.showNotification(notificationData.title, notificationOptions);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function getNotificationDataForSchedule(schedule) {
  switch (schedule.type) {
    case 'task_deadline':
      return {
        title: 'üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö',
        body: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã –∏ –∑–∞–¥–∞—á–∏',
        url: '/tasks'
      };
      
    case 'daily_summary':
      return {
        title: 'üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞',
        body: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∑–∞ —Å–µ–≥–æ–¥–Ω—è',
        url: '/analytics'
      };
      
    case 'weekly_review':
      return {
        title: 'üìà –ù–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä',
        body: '–í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ –∏ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é',
        url: '/analytics'
      };
      
    default:
      return {
        title: 'üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
        body: '–£ –≤–∞—Å –µ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
        url: '/'
      };
  }
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function scheduleCustomNotification(notification) {
  console.log('Scheduling custom notification:', notification);
  
  if (notification.recurring) {
    scheduleRecurringNotification(notification);
  } else {
    scheduleOneTimeNotification(notification);
  }
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function scheduleRecurringNotification(notification) {
  const intervalId = setInterval(() => {
    const now = new Date();
    const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
    
    if (notification.recurring.time === currentTime) {
      let shouldSend = false;
      
      if (notification.recurring.frequency === 'daily') {
        shouldSend = true;
      } else if (notification.recurring.frequency === 'weekly') {
        const dayOfWeek = now.getDay();
        shouldSend = notification.recurring.days && notification.recurring.days.includes(dayOfWeek);
      }
      
      if (shouldSend) {
        const notificationOptions = {
          body: notification.message,
          icon: '/icons/icon-192x192.png',
          badge: '/icons/icon-72x72.png',
          tag: `custom-${notification.id}`,
          data: {
            url: '/',
            type: 'custom',
            notificationId: notification.id
          },
          requireInteraction: false
        };
        
        self.registration.showNotification(notification.title, notificationOptions);
      }
    }
  }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  
  scheduledIntervals.set(`custom-${notification.id}`, intervalId);
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function scheduleOneTimeNotification(notification) {
  const scheduledTime = new Date(notification.scheduledFor);
  const now = new Date();
  const delay = scheduledTime.getTime() - now.getTime();
  
  if (delay > 0) {
    const timeoutId = setTimeout(() => {
      const notificationOptions = {
        body: notification.message,
        icon: '/icons/icon-192x192.png',
        badge: '/icons/icon-72x72.png',
        tag: `custom-${notification.id}`,
        data: {
          url: '/',
          type: 'custom',
          notificationId: notification.id
        },
        requireInteraction: true
      };
      
      self.registration.showNotification(notification.title, notificationOptions);
    }, delay);
    
    scheduledIntervals.set(`custom-${notification.id}`, timeoutId);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function checkScheduledNotifications() {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
  console.log('Checking scheduled notifications...');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
self.addEventListener('push', (event) => {
  console.log('Push event received:', event);
  
  let notificationData = {
    title: '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    body: '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    url: '/',
    tag: 'general'
  };

  if (event.data) {
    try {
      notificationData = event.data.json();
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', e);
    }
  }

  const notificationOptions = {
    body: notificationData.body,
    tag: notificationData.tag,
    icon: '/icons/icon-192x192.png',
    badge: '/icons/icon-72x72.png',
    data: {
      url: notificationData.url
    },
    actions: [
      {
        action: 'view',
        title: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
      },
      {
        action: 'dismiss',
        title: '–°–∫—Ä—ã—Ç—å'
      }
    ],
    requireInteraction: true
  };

  event.waitUntil(
    self.registration.showNotification(notificationData.title, notificationOptions)
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', (event) => {
  console.log('Notification click received:', event);
  
  event.notification.close();

  if (event.action === 'dismiss') {
    return;
  }

  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const urlToOpen = event.notification.data?.url || '/';
  
  event.waitUntil(
    clients.matchAll({
      type: 'window',
      includeUncontrolled: true
    }).then((clientList) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
      for (const client of clientList) {
        if (client.url.includes(self.location.origin) && 'focus' in client) {
          client.navigate(urlToOpen);
          return client.focus();
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–∫–Ω–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ
      if (clients.openWindow) {
        return clients.openWindow(urlToOpen);
      }
    })
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
self.addEventListener('notificationclose', (event) => {
  console.log('Notification closed:', event);
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏–ª–∏ –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É
});
